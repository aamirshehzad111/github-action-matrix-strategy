name: Build and Deploy ChangeHealth on Version Tag

on:
  push:
    # tags:
    #   - 'v-[0-9]+.[0-9]+.[0-9]+-changehealth.[0-9]+'

concurrency:
  group: production-deploy
  cancel-in-progress: true

jobs:
  build_variables:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Set Build variables
        id: build_variables
        shell: pwsh
        run: |
          $tag = 'refs/tags/v-1.7.126-changehealth.1'
          echo "found TAG: $tag"
          
          $versionRegex = '^refs\/tags\/v-(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(-(?<prelabel>[a-zA-Z-][0-9a-zA-Z-]*)\.(?<precounter>0|[1-9]\d*))?$'

          $hasVersion = $tag -match $versionRegex
          if ($hasVersion -eq $false)
          {
            echo "No valid version found in \"$tag\". Please check the format."
            exit 1
          }

          $build_configuration = "Release"
          $build_major_version = $Matches.major
          $build_minor_version = $Matches.minor
          $build_patch_version = $Matches.patch
          $build_prerelease_label = $Matches.prelabel
          $build_prerelease_counter = $Matches.precounter
          $build_ci_counter = "$env:GITHUB_RUN_NUMBER"
          $build_unique_id = Get-Date -Format yyyyMMddHHmmssfffffff

          $build_version_prefix = "$build_major_version.$build_minor_version.$build_patch_version"
          echo "build_version_prefix=$build_version_prefix" >> $env:GITHUB_OUTPUT
          echo "output build_version_prefix: $build_version_prefix"

          if ($build_prerelease_label)
          {
            echo "This workflow should only run for GA release tags, but \"$tag\" has a pre-release indicator."
            exit 1
          }

          $build_version = $build_version_prefix
          echo "build_version=$build_version" >> $env:GITHUB_OUTPUT
          echo "output build_version: $build_version"

          $build_full_version = "$build_version+$build_ci_counter.$build_unique_id"
          echo "build_full_version=$build_full_version" >> $env:GITHUB_OUTPUT
          echo "output build_full_version: $build_full_version"

          $build_assembly_file_version = "$build_version_prefix.$build_ci_counter"
          echo "build_assembly_file_version=$build_assembly_file_version" >> $env:GITHUB_OUTPUT
          echo "output build_assembly_file_version: $build_assembly_file_version"

          $image_tag = "v-$build_version"
          echo "image_tag=$image_tag" >> $env:GITHUB_OUTPUT
          echo "output image_tag: $image_tag"
    outputs:
      build_configuration: ${{ steps.build_variables.outputs.build_configuration }}
      build_version_prefix: ${{ steps.build_variables.outputs.build_version_prefix }}
      build_version: ${{ steps.build_variables.outputs.build_version }}
      build_assembly_file_version: ${{ steps.build_variables.outputs.build_assembly_file_version }}
      build_full_version: ${{ steps.build_variables.outputs.build_full_version }}
      image_tag: ${{ steps.build_variables.outputs.image_tag }}

  print_outputs:
    needs: build_variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Build Variables Outputs
        run: |
          echo "Build Configuration: ${{ needs.build_variables.outputs.build_configuration }}"
          echo "Build Version Prefix: ${{ needs.build_variables.outputs.build_version_prefix }}"
          echo "Build Version: ${{ needs.build_variables.outputs.build_version }}"
          echo "Build Assembly File Version: ${{ needs.build_variables.outputs.build_assembly_file_version }}"
          echo "Build Full Version: ${{ needs.build_variables.outputs.build_full_version }}"
          echo "Image Tag: ${{ needs.build_variables.outputs.image_tag }}"











# name: Deploy Release To Next

# on:
#   push:

# jobs:
#   build_variables:
#     runs-on: ubuntu-latest
#     environment: production
#     outputs:
#       image_tag: ${{ steps.build_variables.outputs.image_tag }}
#       build_version: ${{ steps.build_variables.outputs.build_version }}
#       build_full_version: ${{ steps.build_variables.outputs.build_full_version }}
#     steps:
#       - name: Extract Tag Name
#         id: build_variables
#         run: |
#           tag_ref='v-1.7.117-next'
#           tag_name=$(echo "$tag_ref" | sed 's|refs/tags/||')
#           tag_name="${tag_name:2}"
#           echo "Tag Name: $tag_name"
#           build_ci_counter="$GITHUB_RUN_NUMBER"
#           build_unique_id=$(date +%Y%m%d%H%M%S%N)
#           build_version=$tag_name
#           build_full_version="$build_version+$build_ci_counter.$build_unique_id"
#           tag_name="${tag_ref:2:${#tag_ref}-7}"
#           image_tag="v-$tag_name"
#           echo "Tag Name: $image_tag"
#           echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"
#           echo "build_version=$build_version" >> "$GITHUB_OUTPUT"
#           echo "build_full_version=$build_full_version" >> "$GITHUB_OUTPUT"

#   print_outputs:
#     runs-on: ubuntu-latest
#     needs: build_variables
#     steps:
#       - name: Print outputs
#         run: |
#           echo "Image Tag: ${{ needs.build_variables.outputs.image_tag }}"
#           echo "Build Version: ${{ needs.build_variables.outputs.build_version }}"
#           echo "Build Full Version: ${{ needs.build_variables.outputs.build_full_version }}"
